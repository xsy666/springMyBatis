<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee
	http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">

  <display-name>Archetype Created Web Application</display-name>
  <welcome-file-list>
    <welcome-file>login.jsp</welcome-file>
  </welcome-file-list>
  <!-- Spring应用上下文， 理解层次化的ApplicationContext，SpringMVC显然是要在Spring容器中进行 -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:spring/applicationContext.xml</param-value>
  </context-param>

  <!-- Spring和mybatis的配置文件在applicationContext.xml中引入了 -->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>


  <!--DispatcherServlet,前端控制器，当然在实际的项目当中，需要有多个DispatcherServlet，互联网世界越来越复杂，
  需要提供的服务越来越多，一个系统可能需要给用户提供分发的需求，也能给其他的设备提供检索服务等，机器或
  设备所需要的服务场景和人所需要的服务场景不同，这就需要不同的DispatcherServlet来进行分发服务-->
  <!--配置DispatcherServlet-->
  <servlet>
    <servlet-name>springmvc</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:springmvc/springmvc-servlet.xml</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>springmvc</servlet-name>
    <url-pattern>/</url-pattern>
    <!--<url-pattern>/aaa</url-pattern>-->
  </servlet-mapping>

  <error-page>
    <error-code>404</error-code>
    <location>/WEB-INF/jsp/404.html</location>
  </error-page>
</web-app>
